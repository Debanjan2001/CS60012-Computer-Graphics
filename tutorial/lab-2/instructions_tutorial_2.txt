In this tutorial we will perform more examples with basic shapes and start doing simple animations.

Task-I
------

Drawing points, lines, triangle, and rectangle: This is pretty much similar to the rectangle drawing in the previous tutorial class, with the difference that we will paint multiple objects on the screen. You are provided with the point coordinates for convenience. Following are the instructions:

- draw lines between points (20, 20), (400, 20), and (20, 20), (20, 400). This will draw the coordinate axes.
- draw 3 points at (100, 50), (100, 150), (200, 200) - increase the point size so that it's visible (you can use glPointSize()).
- draw a triangle between (200, 100), (300, 100), (250, 200)
- draw a red rectangle with vertices (250, 250), (350, 350)


Task-II
-------

Rotating a solid cube around its center: This is our first OpenGL animation. Your program will draw a white cube and continue rotating around its center until the window is closed. For your convenience, a sample program 'spin.c' is provided that rotates a 2D square by mouse click. Study the code, and then modify the code/write from scratch to rotate a 3D cube.

Some useful tips: 
- for animations, use double buffering (GLUT_DOUBLE) in GLUT initialization
- draw the cube in display() callback function using glutSolidCube(). 
- use glRotatef() for the rotation. If your cube looks like too close to the camera and does not fit entirely within the window, then you might need to translate it to a bit far location. You can use glTranslatef() for this.
- same as before, use glClear() and glFlush() in display function. Since you are using double buffer, glutSwapBuffers() should be used at the end of display fumction.
- define projection, viewport, etc. in reshape callback function. Use glutReshapeFunc() in main() for that.
- use glutIdleFunc() for the animation. Don't forget to call the display callback from there (otherwise you won't see any animation)


